/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  Overrides,
  BigNumberish,
  BytesLike,
} from "fuels";

export type SmallStructInput = { i: BigNumberish };

export type SmallStruct = { i: number };

export type BigStructInput = { i: string };

export type BigStruct = { i: string };

export type SmallEnumInput = { Empty: any };

export type SmallEnum = { Empty: any };

export type BigEnumInput = { Address: string };

export type BigEnum = { Address: string };

interface CoverageContractAbiInterface extends Interface {
  functions: {
    echo_u8: FunctionFragment;
    echo_u16: FunctionFragment;
    echo_u32: FunctionFragment;
    echo_u64: FunctionFragment;
    echo_bool: FunctionFragment;
    echo_b256: FunctionFragment;
    echo_str_1: FunctionFragment;
    echo_str_2: FunctionFragment;
    echo_str_3: FunctionFragment;
    echo_str_8: FunctionFragment;
    echo_str_9: FunctionFragment;
    echo_tuple_u8: FunctionFragment;
    echo_tuple_u64: FunctionFragment;
    echo_tuple_mixed: FunctionFragment;
    echo_array_u8: FunctionFragment;
    echo_array_u64: FunctionFragment;
    echo_array_bool: FunctionFragment;
    echo_struct_small: FunctionFragment;
    echo_struct_big: FunctionFragment;
    echo_enum_small: FunctionFragment;
    echo_enum_big: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "echo_u8",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_u16",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_u32",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_u64",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_bool",
    values: [boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_b256",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_str_1",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_str_2",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_str_3",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_str_8",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_str_9",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_tuple_u8",
    values: [any]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_tuple_u64",
    values: [any]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_tuple_mixed",
    values: [any]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_array_u8",
    values: [[BigNumberish, BigNumberish]]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_array_u64",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_array_bool",
    values: [[boolean, boolean]]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_struct_small",
    values: [SmallStructInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_struct_big",
    values: [BigStructInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_enum_small",
    values: [SmallEnumInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "echo_enum_big",
    values: [BigEnumInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "echo_u8",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_u16",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_u32",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_u64",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_bool",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_b256",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_str_1",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_str_2",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_str_3",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_str_8",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_str_9",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_tuple_u8",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_tuple_u64",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_tuple_mixed",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_array_u8",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_array_u64",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_array_bool",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_struct_small",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_struct_big",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_enum_small",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "echo_enum_big",
    data: BytesLike
  ): DecodedValue;
}

export class CoverageContractAbi extends Contract {
  interface: CoverageContractAbiInterface;
  functions: {
    echo_u8(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<number>;

    echo_u16(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<number>;

    echo_u32(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    echo_u64(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    echo_bool(
      input: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<boolean>;

    echo_b256(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_1(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_2(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_3(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_8(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_9(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_tuple_u8(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_tuple_u64(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_tuple_mixed(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_array_u8(
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[number, number]>;

    echo_array_u64(
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[bigint, bigint, bigint, bigint, bigint]>;

    echo_array_bool(
      input: [boolean, boolean],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[boolean, boolean]>;

    echo_struct_small(
      input: SmallStructInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<SmallStruct>;

    echo_struct_big(
      input: BigStructInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigStruct>;

    echo_enum_small(
      input: SmallEnumInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<SmallEnum>;

    echo_enum_big(
      input: BigEnumInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigEnum>;
  };
  callStatic: {
    echo_u8(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<number>;

    echo_u16(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<number>;

    echo_u32(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    echo_u64(
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    echo_bool(
      input: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<boolean>;

    echo_b256(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_1(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_2(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_3(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_8(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_str_9(
      input: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<string>;

    echo_tuple_u8(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_tuple_u64(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_tuple_mixed(
      input: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<any>;

    echo_array_u8(
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[number, number]>;

    echo_array_u64(
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[bigint, bigint, bigint, bigint, bigint]>;

    echo_array_bool(
      input: [boolean, boolean],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<[boolean, boolean]>;

    echo_struct_small(
      input: SmallStructInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<SmallStruct>;

    echo_struct_big(
      input: BigStructInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigStruct>;

    echo_enum_small(
      input: SmallEnumInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<SmallEnum>;

    echo_enum_big(
      input: BigEnumInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigEnum>;
  };

  echo_u8(
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<number>;

  echo_u16(
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<number>;

  echo_u32(
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<bigint>;

  echo_u64(
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<bigint>;

  echo_bool(
    input: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<boolean>;

  echo_b256(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_str_1(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_str_2(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_str_3(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_str_8(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_str_9(
    input: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<string>;

  echo_tuple_u8(
    input: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<any>;

  echo_tuple_u64(
    input: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<any>;

  echo_tuple_mixed(
    input: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<any>;

  echo_array_u8(
    input: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<[number, number]>;

  echo_array_u64(
    input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<[bigint, bigint, bigint, bigint, bigint]>;

  echo_array_bool(
    input: [boolean, boolean],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<[boolean, boolean]>;

  echo_struct_small(
    input: SmallStructInput,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SmallStruct>;

  echo_struct_big(
    input: BigStructInput,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BigStruct>;

  echo_enum_small(
    input: SmallEnumInput,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SmallEnum>;

  echo_enum_big(
    input: BigEnumInput,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BigEnum>;
}
